#Binary Search

#This example is going to show you the power of binary searching. This program is going to guess the number you input. 
#And based on your instruction it will perform a binary search to find your inputed number.

low = 0
high = 100
guess = (high + low)/2 

#Initial message in input function
print ('Please think of a number between 0 and 100!')
z = int(input ('Insert a number: '))

#While loop 
while z != guess: #If the users number is 50 the program will automatically end. 
   guess = (high + low)/2  
   print ('Is your secret number', int((guess)), '?') #The initital guess will be 50 ((100+0) /2) = 50
   
   y = input ("""Enter 'h' to indicate the guess is too high. Enter 'l'
to indicate the guess is too low. Enter 'c' to indicate I guessed correctly. 
If you entered an incorrect instruction then type 'exit' and start over. """)
   if y == 'h':
       high = guess #If the initial guess was too high then the program put 50 as the numerator ((50+0) /2) = 25.
   elif y == 'l':
       low = guess #If the initial guess was too low then the program will but 50 as the denomenator ((100+20)/2) = 75
   elif y == 'exit':
       z = int(input ('Insert a number: ')) #In the case of an incorrect input user can restart the program 
        
   elif y == 'c':
       break #Once the correct number is guessed, the program was end.
   
   else:
       print ('Sorry, I did not understand your input.')

print ('Game over. Your secret number was ' + str(round(guess))) 

#Binary searching is a very powerful and efficent way to search. By incrementially narrowing the solution based on the input values the program is able to figure out the solution more efficently. 
